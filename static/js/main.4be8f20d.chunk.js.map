{"version":3,"sources":["Editor.js","Previewer.js","default.js","App.js","index.js"],"names":["Editor","react_default","a","createElement","id","className","value","this","props","input","onChange","updateInput","Component","Previewer","dangerouslySetInnerHTML","markDown","defaultText","marked","require","setOptions","gfm","breaks","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","__html","updateMarkDown","bind","assertThisInitialized","setState","event","target","prevProps","prevState","src_Editor","src_Previewer","ReactDOM","render","src_App","document","getElementById"],"mappings":"uOAiBeA,mLAZX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,cACNH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,WAAf,UACEJ,EAAAC,EAAAC,cAAA,YAAUC,GAAG,SACXE,MAAOC,KAAKC,MAAMC,MAClBC,SAAUH,KAAKC,MAAMG,sBARZC,aCaNC,mLAXX,OACEZ,EAAAC,EAAAC,cAAA,OAAKC,GAAG,iBACNH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,WAAf,aACEJ,EAAAC,EAAAC,cAAA,OAAKC,GAAG,UACNU,wBAAyBP,KAAKC,MAAMO,mBANxBH,aC6CTI,EA/CA,wqCCMXC,EAASC,EAAQ,IACrBD,EAAOE,WAAW,CAEhBC,KAAK,EAELC,QAAQ,QA6DKC,cAzDb,SAAAA,EAAYd,GAAO,IAAAe,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAjB,KAAAe,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAjB,KAAAiB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAArB,KAAMC,KACDqB,MAAS,CAEZpB,MAAOO,EAEPD,SAAU,CACRe,OAAQb,EAAOD,KAKnBO,EAAKQ,eAAiBR,EAAKQ,eAAeC,KAApBR,OAAAS,EAAA,EAAAT,CAAAD,IACtBA,EAAKZ,YAAcY,EAAKZ,YAAYqB,KAAjBR,OAAAS,EAAA,EAAAT,CAAAD,IAbFA,gFAkBjBhB,KAAK2B,SAAS,CACZnB,SAAU,CACRe,OAAQb,EAAOV,KAAKsB,MAAMpB,8CAMpB0B,GACV5B,KAAK2B,SAAS,CACZzB,MAAO0B,EAAMC,OAAO9B,mDAKL+B,EAAWC,GACxBA,EAAU7B,QAAUF,KAAKsB,MAAMpB,OACjCF,KAAKwB,kDAKP,OACE9B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,GAAG,SAAR,sBACAH,EAAAC,EAAAC,cAAA,OAAKC,GAAG,OAAOC,UAAU,mBACzBJ,EAAAC,EAAAC,cAACoC,EAAD,CACE9B,MAASF,KAAKsB,MAAMpB,MACpBE,YAAeJ,KAAKI,cAExBV,EAAAC,EAAAC,cAACqC,EAAD,CACIzB,SAAYR,KAAKsB,MAAMd,WANzB,cA5CUH,mBCTlB6B,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.4be8f20d.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Editor extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"editor-div\">\r\n        <div className=\"toolbar\">Editor</div>\r\n          <textarea id=\"editor\"\r\n            value={this.props.input}\r\n            onChange={this.props.updateInput}\r\n          ></textarea>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Editor;\r\n","import React, { Component } from 'react';\r\n\r\nclass Previewer extends Component {\r\n  render() {\r\n    return (\r\n      <div id=\"previewer-div\">\r\n        <div className=\"toolbar\">Previewer</div>\r\n          <div id=\"preview\"\r\n            dangerouslySetInnerHTML={this.props.markDown}>\r\n          </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Previewer;\r\n","let defaultText = `# Welcome to my React Markdown Previewer!\r\n\r\n## This is a sub-heading...\r\n### And here's some other cool stuff:\r\n\r\nHeres some code, \\`<div></div>\\`, between 2 backticks.\r\n\r\n\\`\\`\\`\r\n// this is multi-line code:\r\n\r\nfunction anotherExample(firstLine, lastLine) {\r\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\r\n    return multiLineCode;\r\n  }\r\n}\r\n\\`\\`\\`\r\n\r\n\r\nYou can also make text **bold**... whoa!\r\nOr _italic_.\r\nOr... wait for it... **_both!_**\r\nAnd feel free to go crazy ~~crossing stuff out~~.\r\n\r\nThere's also [links](https://www.freecodecamp.com), and\r\n> Block Quotes!\r\n\r\nAnd if you want to get really crazy, even tables:\r\n\r\nWild Header | Crazy Header | Another Header?\r\n------------ | ------------- | -------------\r\nYour content can | be here, and it | can be here....\r\nAnd here. | Okay. | I think we get it.\r\n\r\n- And of course there are lists.\r\n  - Some are bulleted.\r\n     - With different indentation levels.\r\n        - That look like this.\r\n\r\n\r\n1. And there are numbererd lists too.\r\n1. Use just 1s if you want!\r\n1. But the list goes on...\r\n- Even if you use dashes or asterisks.\r\n* And last but not least, let's not forget embedded images:\r\n\r\n![React Logo w/ Text](https://goo.gl/Umyytc)`\r\n\r\nexport default defaultText;\r\n","import React, { Component } from 'react';\nimport Editor from './Editor';\nimport Previewer from './Previewer';\nimport defaultText from './default.js';\n\n// import markedjs\nlet marked = require('marked');\nmarked.setOptions({\n  // use github flavoured markdown\n  gfm: true,\n  // interpret carriage returns as line breaks\n  breaks: true\n});\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state =  {\n      // on load display default text\n      input: defaultText,\n      // convert default text into markdown\n      markDown: {\n        __html: marked(defaultText)\n      }\n    }\n\n    // bind this in functions\n    this.updateMarkDown = this.updateMarkDown.bind(this);\n    this.updateInput = this.updateInput.bind(this);\n  }\n\n  // called when input is updated\n  updateMarkDown() {\n    this.setState({\n      markDown: {\n        __html: marked(this.state.input)\n      }\n    });\n  }\n\n  // called when text in editor is updated by user\n  updateInput(event) {\n    this.setState({\n      input: event.target.value,\n    });\n  }\n\n  // on change of input field, call update markdown\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.input !== this.state.input) {\n      this.updateMarkDown();\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <div id=\"title\">Markdown Previewer</div>\n        <div id=\"main\" className=\"container-fluid\">\n        <Editor\n          input = {this.state.input}\n          updateInput = {this.updateInput}\n        />\n      <Previewer\n          markDown = {this.state.markDown}\n        /> }\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}